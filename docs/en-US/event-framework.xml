<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "cloudstack.ent">
%BOOK_ENTITIES;
]>

<!-- Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<section id="event-framework">
  <title>Event Notification</title>
  <para>Event notification framework provides a means for the Management Server components to
    publish and subscribe to &PRODUCT; events. Event notification is achieved by implementing the
    concept of event bus abstraction in the Management Server. An event bus is introduced in the
    Management Server that allows the &PRODUCT;components and extension plug-ins to subscribe to the
    events by using the Advanced Message Queuing Protocol (AMQP) client. A default implementation of
    event bus is provided as a plug-in in &PRODUCT;that uses the RabbitMQ AMQP client. The AMQP
    client pushes the published events to a compatible AMQP server. So all the &PRODUCT; events are
    published to an exchange in the AMQP server. Every resource, such as user VM, volume, NIC,
    network, public IP, snapshot, and template, is associated with a state machine and generates
    events as part of the state change. Therefore, the publishers of events in &PRODUCT; becomes the
    StateListeners associated with the resource. In order for &PRODUCT; to generate a rich set of
    events and to have a clean mechanism to generate events, it's important to have a state machine
    associated with every resource that is managed by &PRODUCT;. For example, UserVMStateListener,
    the listener for the state changes of the user VMs creates event object and post on to the event
    bus.</para>
  <para>As part of Event notification framework, a new event for state change is introduced.
    Resources, such as VMs, volumes, snapshosts, networks, state changes results in a state change
    event. When the state of a resource changes, a state change event is published in the state
    machine corresponding to a resource on the event bus.</para>
  <formalpara>
    <title>Use Cases</title>
    <para>The following are some of the use cases:</para>
  </formalpara>
  <itemizedlist>
    <listitem>
      <para>Usage or Billing Engines: A third-party cloud usage solution can implement a plug-in to
        &PRODUCT; that subscribes to &PRODUCT; events and generates usage data. The usage data is
        consumed by their usage software.</para>
    </listitem>
    <listitem>
      <para>AMQP plug-in can place all the events on the a message queue, then a AMQP message broker
        can provide topic-based notification to the subscribers.</para>
    </listitem>
    <listitem>
      <para>Publish and Subscribe notification service can be implemented as a pluggable service in
        &PRODUCT; that provides rich API for event notification, such as topics-based subscription
        and notification, and deal with multi-tenancy, authentication, and authorization
        issues.</para>
    </listitem>
  </itemizedlist>
  <para>As a &PRODUCT; administrator, you need to perform a one-time configuration to enable event
    notification framework. You need to make necessary changes to the componentContext.xml, then
    restart the Management Server. At run time no changes can control the behaviour.</para>
</section>
